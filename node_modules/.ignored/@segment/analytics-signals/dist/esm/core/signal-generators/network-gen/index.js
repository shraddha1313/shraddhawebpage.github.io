import { logger } from '../../../lib/logger';
import { createNetworkSignal } from '../../../types/factories';
import { NetworkInterceptor, } from './network-interceptor';
import { containsJSONContentType, tryJSONParse } from './helpers';
export class NetworkGenerator {
    constructor() {
        this.id = 'network';
        this.interceptor = new NetworkInterceptor();
        /* List of all signal request IDs that have been emitted */
        this.emittedRequestIds = [];
    }
    register(emitter) {
        const handleRequest = (rq) => {
            if (!rq.url) {
                return;
            }
            const data = typeof rq.body === 'string' ? tryJSONParse(rq.body) : null;
            this.emittedRequestIds.push(rq.id);
            emitter.emit(createNetworkSignal({
                action: 'request',
                url: rq.url,
                method: rq.method || 'GET',
                data,
                contentType: rq.headers?.get('content-type') || '',
            }));
        };
        const handleResponse = async (rs) => {
            const isSuccessWithNonJSONResponse = rs.ok &&
                rs.responseType !== 'json' &&
                !containsJSONContentType(rs.headers);
            const isErrorButRequestNeverEmittted = !rs.ok && !this.emittedRequestIds.includes(rs.req.id);
            if (isSuccessWithNonJSONResponse || isErrorButRequestNeverEmittted) {
                return;
            }
            const url = rs.url;
            if (!url) {
                return;
            }
            const data = await rs.body();
            emitter.emit(createNetworkSignal({
                action: 'response',
                url,
                data: data,
                ok: rs.ok,
                status: rs.status,
                contentType: rs.headers.get('content-type') || '',
            }));
        };
        this.interceptor.addInterceptors(handleRequest, handleResponse);
        return () => {
            this.interceptor.cleanup();
            logger.debug('Removing fetch interceptor');
        };
    }
}
//# sourceMappingURL=index.js.map