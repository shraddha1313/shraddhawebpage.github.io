import { logger } from '../../lib/logger';
export class SignalEventProcessor {
    constructor(analytics, sandbox) {
        this.analytics = analytics;
        this.sandbox = sandbox;
    }
    async process(signal, signals) {
        let analyticsMethodCalls;
        try {
            analyticsMethodCalls = await this.sandbox.process(signal, signals);
        }
        catch (err) {
            // in practice, we should never hit this error, but if we do, we should log it.
            console.error('Error processing signal', { signal, signals }, err);
            return;
        }
        for (const methodName in analyticsMethodCalls) {
            const name = methodName;
            const eventsCollection = analyticsMethodCalls[name];
            eventsCollection.forEach((args) => {
                logger.info('New method call:', `analytics.${name}()`, args);
                // @ts-ignore
                this.analytics[name](...args);
            });
        }
    }
    cleanup() {
        return this.sandbox.jsSandbox.destroy();
    }
}
//# sourceMappingURL=processor.js.map