"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OnNavigationEventGenerator = exports.shouldIgnoreElement = exports.FormSubmitGenerator = exports.ClickSignalsGenerator = void 0;
const detect_url_change_1 = require("../../../lib/detect-url-change");
const factories_1 = require("../../../types/factories");
const element_parser_1 = require("./element-parser");
class ClickSignalsGenerator {
    constructor() {
        this.id = 'click';
    }
    register(emitter) {
        const handleClick = (ev) => {
            const target = ev.target;
            if (!target)
                return;
            const el = this.getClosestClickableElement(target);
            if (el) {
                emitter.emit((0, factories_1.createInteractionSignal)({
                    eventType: 'click',
                    target: (0, element_parser_1.parseElement)(el),
                }));
            }
        };
        document.addEventListener('click', handleClick, true);
        return () => document.removeEventListener('click', handleClick);
    }
    getClosestClickableElement(el) {
        // if you click on a nested element, we want to get the closest clickable ancestor. Useful for things like buttons with nested value or images
        const selector = [
            'button',
            'a',
            'option',
            '[role="button"]',
            '[role="link"]',
            '[role="menuitem"]',
            '[role="menuitemcheckbox"]',
            '[role="menuitemradio"]',
            '[role="tab"]',
            '[role="option"]',
            '[role="switch"]',
            '[role="treeitem"]',
        ].join(', ');
        return el.closest(selector);
    }
}
exports.ClickSignalsGenerator = ClickSignalsGenerator;
class FormSubmitGenerator {
    constructor() {
        this.id = 'form-submit';
    }
    register(emitter) {
        const handleSubmit = (ev) => {
            const target = ev.target;
            if (!target)
                return;
            // reference to the form element that the submit event is being fired at
            const submitter = ev.submitter;
            // If the form is submitted via JavaScript using form.submit(), the submitter property will be null because no specific button/input triggered the submission.
            emitter.emit((0, factories_1.createInteractionSignal)({
                eventType: 'submit',
                target: (0, element_parser_1.parseElement)(target),
                submitter: submitter ? (0, element_parser_1.parseElement)(submitter) : undefined,
            }));
        };
        document.addEventListener('submit', handleSubmit, true);
        return () => document.removeEventListener('submit', handleSubmit);
    }
}
exports.FormSubmitGenerator = FormSubmitGenerator;
const shouldIgnoreElement = (el) => {
    if (el instanceof HTMLInputElement) {
        return el.type === 'password';
    }
    return false;
};
exports.shouldIgnoreElement = shouldIgnoreElement;
class OnNavigationEventGenerator {
    constructor() {
        this.id = 'navigation';
    }
    register(emitter) {
        // emit navigation signal on page load
        emitter.emit((0, factories_1.createNavigationSignal)({
            action: 'pageLoad',
            ...this.createCommonFields(),
        }));
        // emit a navigation signal whenever the URL has changed
        const urlChange = new detect_url_change_1.URLChangeObservable();
        urlChange.subscribe((prevUrl) => emitter.emit((0, factories_1.createNavigationSignal)({
            action: 'urlChange',
            prevUrl,
            ...this.createCommonFields(),
        })));
        return () => {
            urlChange.unsubscribe();
        };
    }
    createCommonFields() {
        return {
            // these fields are named after those from the page call, rather than a DOM api.
            url: location.href,
            path: location.pathname,
            hash: location.hash,
            search: location.search,
            title: document.title,
        };
    }
}
exports.OnNavigationEventGenerator = OnNavigationEventGenerator;
//# sourceMappingURL=dom-gen.js.map