import { SignalBufferSettingsConfig, SignalPersistentStorage } from '../buffer';
import { SignalsIngestSettingsConfig } from '../middleware/signals-ingest/signals-ingest-client';
import { SandboxSettingsConfig } from '../processor/sandbox';
import { SignalsPluginSettingsConfig } from '../../types';
import { MutationGeneratorSettings } from '../signal-generators/dom-gen/change-gen';
import { NetworkSettingsConfig } from '../middleware/network-signals-filter/network-signals-filter';
export type SignalsSettingsConfig = Pick<SignalsPluginSettingsConfig, 'middleware' | 'maxBufferSize' | 'apiHost' | 'functionHost' | 'flushAt' | 'flushInterval' | 'disableSignalsRedaction' | 'enableSignalsIngestion' | 'networkSignalsAllowList' | 'networkSignalsDisallowList' | 'networkSignalsAllowSameDomain' | 'signalStorageType' | 'mutationGenExtraSelectors' | 'mutationGenObservedRoles' | 'mutationGenObservedTags' | 'mutationGenPollInterval' | 'mutationGenObservedAttributes' | 'debug'> & {
    signalStorage?: SignalPersistentStorage;
    processSignal?: string;
};
/**
 * Global settings for the application
 * In the future this pattern may allows us to add settings which can be dynamically set by the user.
 * Currently, this is just a way to pass settings to the different parts of the application.
 */
export declare class SignalGlobalSettings {
    sandbox: SandboxSettingsConfig;
    signalBuffer: SignalBufferSettingsConfig;
    ingestClient: SignalsIngestSettingsConfig;
    network: NetworkSettingsConfig;
    signalsDebug: SignalsDebugSettings;
    mutationGenerator: MutationGeneratorSettings;
    private sampleSuccess;
    constructor(settings: SignalsSettingsConfig);
    update({ edgeFnDownloadURL, disallowListURLs, sampleRate, }: {
        /**
         * The URL to download the edge function from
         */
        edgeFnDownloadURL?: string;
        /**
         * Add new URLs to the disallow list
         */
        disallowListURLs: (string | undefined)[];
        /**
         * Sample rate to determine sending signals
         */
        sampleRate?: number;
    }): void;
    private checkSampleRate;
}
export declare class SignalsDebugSettings {
    private static redactionKey;
    private static ingestionKey;
    private storage;
    constructor(disableRedaction?: boolean, enableIngestion?: boolean);
    setAllDebugging: (boolean: boolean) => void;
    getDisableSignalsRedaction: () => boolean;
    getEnableSignalsIngestion: () => boolean;
}
//# sourceMappingURL=settings.d.ts.map