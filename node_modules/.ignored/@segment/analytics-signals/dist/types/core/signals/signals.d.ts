import { SignalEmitter } from '../emitter';
import { SignalGenerator, SignalGeneratorClass } from '../signal-generators/types';
import { Signal } from '@segment/analytics-signals-runtime';
import { AnyAnalytics } from '../../types';
import { SignalsSettingsConfig } from './settings';
import { LogLevelOptions } from '../debug-mode';
interface ISignals {
    start(analytics: AnyAnalytics): Promise<void>;
    stop(): void;
    clearStorage(): void;
    registerGenerator(generators: (SignalGeneratorClass | SignalGenerator)[]): Promise<void>;
}
export type SignalsPublicEmitterContract = {
    signal: [Signal];
};
export declare class Signals implements ISignals {
    private buffer;
    signalEmitter: SignalEmitter;
    private cleanup;
    private globalSettings;
    constructor(settingsConfig?: SignalsSettingsConfig);
    /**
     * Does the following:
     * - Sends any queued signals to the server.
     * - Registers additional custom signal generators.
     */
    start(analytics: AnyAnalytics): Promise<void>;
    stop(): void;
    clearStorage(): void;
    /**
     * Disable redaction, ingestion of signals, and other logging.
     */
    debug(boolean?: boolean, logLevel?: LogLevelOptions): void;
    /**
     * Register custom signal generators to emit signals.
     */
    registerGenerator(generators: (SignalGeneratorClass | SignalGenerator)[]): Promise<void>;
    private getSignalEmitter;
}
export {};
//# sourceMappingURL=signals.d.ts.map