import { Signal } from '@segment/analytics-signals-runtime';
import { RegexLike } from '../../../types/settings';
import { SignalsMiddleware, SignalsMiddlewareContext } from '../../emitter';
import { SignalsSettingsConfig } from '../../signals';
export type NetworkSettingsConfigSettings = Pick<SignalsSettingsConfig, 'networkSignalsAllowList' | 'networkSignalsAllowSameDomain' | 'networkSignalsDisallowList'>;
export declare class NetworkSettingsConfig {
    networkSignalsAllowSameDomain: boolean;
    networkSignalsFilterList: NetworkSignalsFilterList;
    constructor({ networkSignalsAllowList, networkSignalsDisallowList, networkSignalsAllowSameDomain, }: NetworkSettingsConfigSettings);
}
declare class NetworkFilterListItem {
    regexes: RegexLike[];
    private get combinedRegex();
    constructor(regexes: RegexLike[]);
    test(value: string): boolean;
    add(...regex: RegexLike[]): void;
    addURLLike(...urlLike: string[]): void;
    private urlToRegex;
}
export declare class NetworkSignalsFilterList {
    allowed: NetworkFilterListItem;
    disallowed: NetworkFilterListItem;
    private disallowedDefaults;
    constructor(allowList: RegexLike[] | undefined, disallowList: RegexLike[] | undefined);
    isDisallowed(url: string): boolean;
    isAllowed(url: string): boolean;
    getRegexes(): {
        allowed: string[];
        disallowed: string[];
    };
}
export type NetworkSignalsFilterSettings = Pick<NetworkSettingsConfig, 'networkSignalsAllowSameDomain' | 'networkSignalsFilterList'>;
export declare class NetworkSignalsFilter {
    settings: NetworkSignalsFilterSettings;
    constructor(settings: NetworkSignalsFilterSettings);
    isAllowed(url: string): boolean;
}
export declare class NetworkSignalsFilterMiddleware implements SignalsMiddleware {
    private filter;
    load(ctx: SignalsMiddlewareContext): void | Promise<void>;
    private createMetadata;
    process(signal: Signal): Signal | null;
}
export {};
//# sourceMappingURL=network-signals-filter.d.ts.map