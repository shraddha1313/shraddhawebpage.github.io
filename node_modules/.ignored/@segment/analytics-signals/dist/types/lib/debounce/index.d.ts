export declare function debounce<T extends (...args: any[]) => void>(func: T, wait: number): (...args: Parameters<T>) => void;
/**
 * Debounce with key-based partitioning, so that the debouncing is done per key group.
 * @param func The function to debounce
 * @param getKey A function that returns a key for the arguments passed to `func` -- the return type must be serializable
 */
export declare function debounceWithKey<Args extends any[]>(func: (...args: Args) => void, getKey: (...args: Args) => object | string, wait: number): (...args: Args) => void;
//# sourceMappingURL=index.d.ts.map