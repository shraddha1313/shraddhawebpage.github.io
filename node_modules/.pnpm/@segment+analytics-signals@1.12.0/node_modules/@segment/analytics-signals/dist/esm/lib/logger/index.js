import { parseDebugModeQueryString, parseSignalsLogLevel, } from '../../core/debug-mode';
import { WebStorage } from '../storage/web-storage';
class Logger {
    get logLevel() {
        return this.storage.getItem(this.logLevelKey) ?? 'off';
    }
    constructor() {
        this.logLevelKey = 'segment_signals_log_level';
        this.storage = new WebStorage(window.sessionStorage);
        this.enableLogging = (type) => {
            this.storage.setItem(this.logLevelKey, type);
        };
        this.disableLogging = () => {
            this.storage.setItem(this.logLevelKey, 'off');
        };
        this.log = (level, ...args) => {
            console.log(`[signals:${level}]`, ...args);
        };
        this.info = (...args) => {
            if (this.logLevel === 'info' || this.logLevel === 'debug') {
                this.log('info', ...args);
            }
        };
        this.debug = (...args) => {
            if (this.logLevel === 'debug') {
                this.log('debug', ...args);
            }
        };
        this.logSignal = (signal) => {
            this.info('New signal:', signal.type, signal.data, ...(signal.type === 'interaction' && 'change' in signal.data
                ? ['change:', JSON.stringify(signal.data.change, null, 2)]
                : []));
        };
        // if log level is set in query string, use that, otherwise if debug mode is set, set log level to info
        const logLevel = parseSignalsLogLevel();
        if (logLevel !== undefined) {
            logLevel === 'off' ? this.disableLogging() : this.enableLogging(logLevel);
        }
        else {
            const debugMode = parseDebugModeQueryString();
            if (debugMode === true) {
                this.enableLogging('info');
            }
        }
    }
}
export const logger = new Logger();
//# sourceMappingURL=index.js.map