import { URLChangeObservable } from '../../../lib/detect-url-change';
import { createInteractionSignal, createNavigationSignal, } from '../../../types/factories';
import { parseElement } from './element-parser';
export class ClickSignalsGenerator {
    constructor() {
        this.id = 'click';
    }
    register(emitter) {
        const handleClick = (ev) => {
            const target = ev.target;
            if (!target)
                return;
            const el = this.getClosestClickableElement(target);
            if (el) {
                emitter.emit(createInteractionSignal({
                    eventType: 'click',
                    target: parseElement(el),
                }));
            }
        };
        document.addEventListener('click', handleClick, true);
        return () => document.removeEventListener('click', handleClick);
    }
    getClosestClickableElement(el) {
        // if you click on a nested element, we want to get the closest clickable ancestor. Useful for things like buttons with nested value or images
        const selector = [
            'button',
            'a',
            'option',
            '[role="button"]',
            '[role="link"]',
            '[role="menuitem"]',
            '[role="menuitemcheckbox"]',
            '[role="menuitemradio"]',
            '[role="tab"]',
            '[role="option"]',
            '[role="switch"]',
            '[role="treeitem"]',
        ].join(', ');
        return el.closest(selector);
    }
}
export class FormSubmitGenerator {
    constructor() {
        this.id = 'form-submit';
    }
    register(emitter) {
        const handleSubmit = (ev) => {
            const target = ev.target;
            if (!target)
                return;
            // reference to the form element that the submit event is being fired at
            const submitter = ev.submitter;
            // If the form is submitted via JavaScript using form.submit(), the submitter property will be null because no specific button/input triggered the submission.
            emitter.emit(createInteractionSignal({
                eventType: 'submit',
                target: parseElement(target),
                submitter: submitter ? parseElement(submitter) : undefined,
            }));
        };
        document.addEventListener('submit', handleSubmit, true);
        return () => document.removeEventListener('submit', handleSubmit);
    }
}
export const shouldIgnoreElement = (el) => {
    if (el instanceof HTMLInputElement) {
        return el.type === 'password';
    }
    return false;
};
export class OnNavigationEventGenerator {
    constructor() {
        this.id = 'navigation';
    }
    register(emitter) {
        // emit navigation signal on page load
        emitter.emit(createNavigationSignal({
            action: 'pageLoad',
            ...this.createCommonFields(),
        }));
        // emit a navigation signal whenever the URL has changed
        const urlChange = new URLChangeObservable();
        urlChange.subscribe((prevUrl) => emitter.emit(createNavigationSignal({
            action: 'urlChange',
            prevUrl,
            ...this.createCommonFields(),
        })));
        return () => {
            urlChange.unsubscribe();
        };
    }
    createCommonFields() {
        return {
            // these fields are named after those from the page call, rather than a DOM api.
            url: location.href,
            path: location.pathname,
            hash: location.hash,
            search: location.search,
            title: document.title,
        };
    }
}
//# sourceMappingURL=dom-gen.js.map