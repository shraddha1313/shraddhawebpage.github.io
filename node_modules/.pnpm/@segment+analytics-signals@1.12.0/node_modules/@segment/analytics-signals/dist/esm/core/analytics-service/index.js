import { createInstrumentationSignal } from '../../types/factories';
/**
 * Helper / facade that wraps the analytics, and abstracts away the details of the analytics instance.
 */
export class AnalyticsService {
    constructor(analyticsInstance) {
        this.instance = analyticsInstance;
        this.edgeFnSettings = this.parseEdgeFnSettings(analyticsInstance.settings.cdnSettings);
    }
    parseEdgeFnSettings(cdnSettings) {
        const edgeFnSettings = cdnSettings.edgeFunction;
        if (edgeFnSettings && 'downloadURL' in edgeFnSettings) {
            return edgeFnSettings;
        }
    }
    createSegmentInstrumentationEventGenerator() {
        let disable = false;
        const generator = {
            id: 'segment-event-generator',
            register: async (signalEmitter) => {
                await this.instance.addSourceMiddleware(({ payload, next }) => {
                    if (disable) {
                        return;
                    }
                    const event = payload.obj;
                    const isEventFromSignalEdgeFunction = event.context.__eventOrigin?.type === 'Signal';
                    if (!isEventFromSignalEdgeFunction) {
                        signalEmitter.emit(createInstrumentationSignal(event));
                    }
                    return next(payload);
                });
                return () => {
                    disable = true;
                };
            },
        };
        return generator;
    }
}
//# sourceMappingURL=index.js.map