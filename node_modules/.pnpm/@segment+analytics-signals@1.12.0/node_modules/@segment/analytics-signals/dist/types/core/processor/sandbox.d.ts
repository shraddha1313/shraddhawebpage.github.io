import { Signal } from '@segment/analytics-signals-runtime';
export type MethodName = 'page' | 'identify' | 'track' | 'alias' | 'screen' | 'group';
/**
 * Buffer of any analytics calls made during the processing of a signal
 */
export type AnalyticsMethodCalls = Record<MethodName, any[]> & {
    reset: unknown[];
};
interface CodeSandbox {
    run: (fn: string, scope: Record<string, any>) => Promise<any>;
    destroy: () => Promise<void>;
}
export type SandboxSettingsConfig = {
    functionHost: string | undefined;
    processSignal: string | undefined;
    edgeFnDownloadURL: string | undefined;
    edgeFnFetchClient?: typeof fetch;
};
export declare class SandboxSettings {
    /**
     * Should look like:
     * ```js
     * function processSignal(signal) {
     * ...
     * }
     * ```
     */
    processSignal: Promise<string>;
    constructor(settings: SandboxSettingsConfig);
}
export declare class Sandbox {
    settings: SandboxSettings;
    jsSandbox: CodeSandbox;
    constructor(settings: SandboxSettings);
    process(signal: Signal, signals: Signal[]): Promise<AnalyticsMethodCalls>;
}
export {};
//# sourceMappingURL=sandbox.d.ts.map