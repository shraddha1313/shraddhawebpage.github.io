import type { ParsedAttributes } from '@segment/analytics-signals-runtime';
interface Label {
    textContent: string;
    id: string;
    attributes: ParsedAttributes;
}
interface ParsedElementBase {
    attributes: ParsedAttributes;
    classList: string[];
    id: string;
    labels?: Label[];
    label?: Label;
    name?: string;
    nodeName: string;
    tagName: string;
    title: string;
    type?: string;
    value?: string;
    textContent?: string;
    innerText?: string;
    describedBy?: Label;
}
interface ParsedSelectElement extends ParsedElementBase {
    selectedOptions: {
        label: string;
        value: string;
    }[];
    selectedIndex: number;
}
interface ParsedInputElement extends ParsedElementBase {
    checked: boolean;
}
interface ParsedMediaElement extends ParsedElementBase {
    currentSrc?: string;
    currentTime?: number;
    duration: number;
    ended: boolean;
    muted: boolean;
    paused: boolean;
    playbackRate: number;
    readyState?: number;
    src?: string;
    volume?: number;
}
interface ParsedHTMLFormElement extends ParsedElementBase {
    formData: Record<string, string>;
    innerText: never;
    textContent: never;
}
type AnyParsedElement = ParsedHTMLFormElement | ParsedSelectElement | ParsedInputElement | ParsedMediaElement | ParsedElementBase;
export declare const parseElement: (el: HTMLElement) => AnyParsedElement;
export {};
//# sourceMappingURL=element-parser.d.ts.map