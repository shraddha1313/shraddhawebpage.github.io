"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.debounceWithKey = exports.debounce = void 0;
function debounce(func, wait) {
    let timeoutId = null;
    return function (...args) {
        if (timeoutId) {
            clearTimeout(timeoutId);
        }
        timeoutId = setTimeout(() => func(...args), wait);
    };
}
exports.debounce = debounce;
/**
 * Debounce with key-based partitioning, so that the debouncing is done per key group.
 * @param func The function to debounce
 * @param getKey A function that returns a key for the arguments passed to `func` -- the return type must be serializable
 */
function debounceWithKey(func, getKey, wait) {
    const timers = new Map();
    return (...args) => {
        const key = getKey(...args);
        const keyGroup = typeof key === 'object' ? JSON.stringify(key) : key;
        if (timers.has(keyGroup)) {
            clearTimeout(timers.get(keyGroup));
        }
        const timer = setTimeout(() => {
            timers.delete(keyGroup);
            func(...args);
        }, wait);
        timers.set(keyGroup, timer);
    };
}
exports.debounceWithKey = debounceWithKey;
//# sourceMappingURL=index.js.map