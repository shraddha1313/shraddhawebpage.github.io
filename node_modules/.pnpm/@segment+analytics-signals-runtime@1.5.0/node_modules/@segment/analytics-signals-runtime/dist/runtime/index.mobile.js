// GENERATED, DO NOT EDIT
// Entry point: src/mobile/index.signals-runtime.ts
"use strict";
(() => {
  var __defProp = Object.defineProperty;
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };

  // src/mobile/mobile-constants.ts
  var mobile_constants_exports = {};
  __export(mobile_constants_exports, {
    EventType: () => EventType,
    LocalDataAction: () => LocalDataAction,
    NavigationAction: () => NavigationAction,
    NetworkAction: () => NetworkAction,
    SignalType: () => SignalType
  });
  var SignalType = Object.freeze({
    Interaction: "interaction",
    Navigation: "navigation",
    Network: "network",
    LocalData: "localData",
    Instrumentation: "instrumentation",
    UserDefined: "userDefined"
  });
  var EventType = Object.freeze({
    Track: "track",
    Page: "page",
    Screen: "screen",
    Identify: "identify",
    Group: "group",
    Alias: "alias"
  });
  var NavigationAction = Object.freeze({
    Forward: "forward",
    Backward: "backward",
    Modal: "modal",
    Entering: "entering",
    Leaving: "leaving",
    Page: "page",
    Popup: "popup"
  });
  var NetworkAction = Object.freeze({
    Request: "request",
    Response: "response"
  });
  var LocalDataAction = Object.freeze({
    Loaded: "loaded",
    Updated: "updated",
    Saved: "saved",
    Deleted: "deleted",
    Undefined: "undefined"
  });

  // src/shared/signals-runtime.ts
  function _typeof(o) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof(o);
  }
  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", { writable: false });
    return Constructor;
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return _typeof(key) === "symbol" ? key : String(key);
  }
  function _toPrimitive(input, hint) {
    if (_typeof(input) !== "object" || input === null)
      return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== void 0) {
      var res = prim.call(input, hint || "default");
      if (_typeof(res) !== "object")
        return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  var SignalsRuntime = /* @__PURE__ */ _createClass(function SignalsRuntime2() {
    var _this = this;
    var signals = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    _classCallCheck(this, SignalsRuntime2);
    _defineProperty(this, "find", function(fromSignal, signalType, predicate) {
      return _this.filter(fromSignal, signalType, predicate)[0];
    });
    _defineProperty(this, "filter", function(fromSignal, signalType, predicate) {
      var _isSignalOfType = function _isSignalOfType2(signal) {
        return signal.type === signalType;
      };
      return _this.signalBuffer.slice(_this.signalBuffer.indexOf(fromSignal) + 1).filter(_isSignalOfType).filter(function(signal) {
        return predicate ? predicate(signal) : function() {
          return true;
        };
      });
    });
    this.signalBuffer = signals;
  });

  // src/mobile/mobile-signals-runtime.ts
  function _typeof2(o) {
    "@babel/helpers - typeof";
    return _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof2(o);
  }
  function _defineProperties2(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey2(descriptor.key), descriptor);
    }
  }
  function _createClass2(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties2(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties2(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", { writable: false });
    return Constructor;
  }
  function _classCallCheck2(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    Object.defineProperty(subClass, "prototype", { writable: false });
    if (superClass)
      _setPrototypeOf(subClass, superClass);
  }
  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
      o2.__proto__ = p2;
      return o2;
    };
    return _setPrototypeOf(o, p);
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn(this, result);
    };
  }
  function _possibleConstructorReturn(self, call) {
    if (call && (_typeof2(call) === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized(self);
  }
  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
      return o2.__proto__ || Object.getPrototypeOf(o2);
    };
    return _getPrototypeOf(o);
  }
  function _defineProperty2(obj, key, value) {
    key = _toPropertyKey2(key);
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _toPropertyKey2(arg) {
    var key = _toPrimitive2(arg, "string");
    return _typeof2(key) === "symbol" ? key : String(key);
  }
  function _toPrimitive2(input, hint) {
    if (_typeof2(input) !== "object" || input === null)
      return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== void 0) {
      var res = prim.call(input, hint || "default");
      if (_typeof2(res) !== "object")
        return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  var MobileSignalsRuntime = /* @__PURE__ */ function(_SignalsRuntime) {
    _inherits(MobileSignalsRuntime2, _SignalsRuntime);
    var _super = _createSuper(MobileSignalsRuntime2);
    function MobileSignalsRuntime2() {
      var _this;
      var signals = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      _classCallCheck2(this, MobileSignalsRuntime2);
      _this = _super.call(this, signals);
      _defineProperty2(_assertThisInitialized(_this), "add", function(signal) {
        if (_this.signalCounter < 0) {
          _this.signalCounter = 0;
        }
        if ("index" in signal && signal.index == -1) {
          signal.index = _this.getNextIndex();
        }
        _this.signalBuffer.unshift(signal);
        if (_this.signalBuffer.length > _this.maxBufferSize) {
          _this.signalBuffer.pop();
        }
      });
      _defineProperty2(_assertThisInitialized(_this), "getNextIndex", function() {
        var index = _this.signalCounter;
        _this.signalCounter += 1;
        return index;
      });
      _this.signalCounter = 0;
      _this.maxBufferSize = 1e3;
      return _this;
    }
    return _createClass2(MobileSignalsRuntime2);
  }(SignalsRuntime);

  // src/mobile/index.signals-runtime.ts
  Object.assign(globalThis, {
    signals: new MobileSignalsRuntime()
  }, mobile_constants_exports);
})();
